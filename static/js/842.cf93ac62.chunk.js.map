{"version":3,"file":"static/js/842.cf93ac62.chunk.js","mappings":"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","sources":["calculates/toFixed.ts","calculates/crash.ts","calculates/dice.ts","calculates/plinkoPayouts.ts","calculates/plinko.ts","calculates/limbo.ts","calculates/diamonds.ts","calculates/roulette.ts","calculates/towers.ts","calculates/index.ts","components/PageTemplate/index.tsx","components/Checking/index.tsx","components/Field/index.tsx","components/Input/index.tsx"],"sourcesContent":["export const toFixed = (num: number, fixed: number) => {\n  var re = new RegExp(\"^-?\\\\d+(?:.\\\\d{0,\" + (fixed || -1) + \"})?\");\n  const result = num.toString().match(re);\n\n  return result ? result[0] : \"\";\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport interface CrashResult {\n  gameHash: string;\n  crashPoint: string;\n}\n\nexport const calculateCrashResult = (\n  client_seed: string,\n  serverSeed: string,\n  numberOfGames: string | number,\n) => {\n  let lastSeed = serverSeed;\n  let actual_hash = \"\";\n  let p1: number,\n    p2: number,\n    p3: number,\n    p4: number,\n    roll: number,\n    crashPoint: string;\n\n  const result: CrashResult[] = [];\n\n  for (let x = 0; x < numberOfGames; x++) {\n    const md = forge.md.sha512.create();\n    md.update(client_seed + \"-\" + lastSeed);\n    actual_hash = md.digest().toHex();\n\n    p1 = parseInt(\n      (actual_hash.substring(0, 2) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p2 = parseInt(\n      (actual_hash.substring(2, 4) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p3 = parseInt(\n      (actual_hash.substring(4, 6) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p4 = parseInt(\n      (actual_hash.substring(6, 8) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n\n    roll = Math.floor(\n      (p1 / Math.pow(256, 1) +\n        p2 / Math.pow(256, 2) +\n        p3 / Math.pow(256, 3) +\n        p4 / Math.pow(256, 4)) *\n        1000000,\n    );\n    crashPoint = toFixed(\n      parseFloat(((1000000 / (roll + 1)) * 0.96).toString()),\n      2,\n    );\n\n    result.push({\n      crashPoint,\n      gameHash: lastSeed,\n    });\n\n    const newSeedMD = forge.md.sha256.create();\n    newSeedMD.update(lastSeed);\n    lastSeed = newSeedMD.digest().toHex();\n  }\n\n  return result;\n};\n","import { forge } from \"calculates\";\n\nexport const calculateDiceResult = (\n  clientSeed: string,\n  serverSeed: string,\n  nonce: string | number,\n) => {\n  let combo = serverSeed + \":\" + clientSeed + \":\" + nonce;\n\n  const serverMD = forge.md.sha256.create();\n  serverMD.update(serverSeed);\n  var serverSeedHash = serverMD.digest().toHex();\n\n  const comboMD = forge.md.sha512.create();\n  comboMD.update(combo);\n  combo = comboMD.digest().toHex();\n\n  const combo_length = combo.length;\n  let index = 0;\n  let lucky = 1000000;\n  let hexString = \"\";\n\n  while (lucky >= 1000000) {\n    hexString = combo.substring(index, index + 5);\n    lucky = parseInt((hexString + \"\").replace(/[^a-f0-9]/gi, \"\"), 16);\n\n    if (index + 5 > combo_length) {\n      break;\n    }\n\n    index = index + 5;\n  }\n\n  let roll = 0;\n\n  let result = \"Impossible Game\";\n\n  if (lucky < 1000000) {\n    roll = lucky % 10000;\n    result = `${roll}`;\n  }\n\n  return {\n    serverSeed: serverSeedHash,\n    rollResult: result,\n  };\n};\n","export const plinko_payouts = {\n  \"8\": {\n    low: [4, 1.82, 1.1, 1, 0.5, 1, 1.1, 1.82, 4],\n    medium: [14, 2.4, 1.3, 0.7, 0.4, 0.7, 1.3, 2.4, 14],\n    high: [28, 3.63, 1.5, 0.3, 0.2, 0.3, 1.5, 3.63, 28],\n  },\n  \"9\": {\n    low: [6, 1.9, 1.4, 1, 0.7, 0.7, 1, 1.4, 1.9, 6],\n    medium: [17, 3.2, 1.7, 0.9, 0.5, 0.5, 0.9, 1.7, 3.2, 17],\n    high: [42.2, 6.2, 2, 0.6, 0.2, 0.2, 0.6, 2, 6.2, 42.2],\n  },\n  \"10\": {\n    low: [7, 2.1, 1.3, 1.1, 1, 0.5, 1, 1.1, 1.3, 2.1, 7],\n    medium: [20, 3.7, 2, 1.4, 0.6, 0.4, 0.6, 1.4, 2, 3.7, 20],\n    high: [70, 9, 3, 0.9, 0.3, 0.2, 0.3, 0.9, 3, 9, 70],\n  },\n  \"11\": {\n    low: [7, 1.8, 1.6, 1.3, 1, 0.7, 0.7, 1, 1.3, 1.6, 1.8, 7],\n    medium: [24, 4.6, 2.7, 1.8, 0.7, 0.5, 0.5, 0.7, 1.8, 2.7, 4.6, 24],\n    high: [120, 11, 5.2, 1.4, 0.4, 0.2, 0.2, 0.4, 1.4, 5.2, 11, 120],\n  },\n  \"12\": {\n    low: [5, 1.8, 1.3, 1.3, 1.1, 1, 0.5, 1, 1.1, 1.3, 1.3, 1.8, 5],\n    medium: [33, 8, 3.6, 2, 1.1, 0.6, 0.3, 0.6, 1.1, 2, 3.6, 8, 33],\n    high: [163, 21, 8.1, 1.9, 0.7, 0.2, 0.2, 0.2, 0.7, 1.9, 8.1, 21, 163],\n  },\n  \"13\": {\n    low: [8, 3.2, 1.9, 1.8, 1.2, 0.9, 0.7, 0.7, 0.9, 1.2, 1.8, 1.9, 3.2, 8],\n    medium: [40, 12, 5, 2.9, 1.3, 0.7, 0.4, 0.4, 0.7, 1.3, 2.9, 5, 12, 40],\n    high: [252, 36, 10, 3.9, 1, 0.2, 0.2, 0.2, 0.2, 1, 3.9, 10, 36, 252],\n  },\n  \"14\": {\n    low: [7, 2.5, 2, 1.3, 1.1, 1.1, 1, 0.5, 1, 1.1, 1.1, 1.3, 2, 2.5, 7],\n    medium: [58, 15, 5.8, 3.9, 1.8, 1, 0.5, 0.2, 0.5, 1, 1.8, 3.9, 5.8, 15, 58],\n    high: [\n      420, 50, 17, 4.8, 1.9, 0.3, 0.2, 0.2, 0.2, 0.3, 1.9, 4.8, 17, 50, 420,\n    ],\n  },\n  \"15\": {\n    low: [13, 6.5, 2, 1.5, 1.4, 1.1, 1, 0.7, 0.7, 1, 1.1, 1.4, 1.5, 2, 6.5, 13],\n    medium: [\n      88, 19, 10, 4.4, 2.9, 1.3, 0.5, 0.3, 0.3, 0.5, 1.3, 2.9, 4.4, 10, 19, 88,\n    ],\n    high: [620, 79, 27, 7, 3, 0.5, 0.2, 0.2, 0.2, 0.2, 0.5, 3, 7, 27, 79, 620],\n  },\n  \"16\": {\n    low: [\n      14, 5, 1.4, 1.3, 1.2, 1.1, 1.1, 1, 0.5, 1, 1.1, 1.1, 1.2, 1.3, 1.4, 5, 14,\n    ],\n    medium: [\n      110, 41, 8, 4, 2.9, 1.5, 1, 0.5, 0.3, 0.5, 1, 1.5, 2.9, 4, 8, 41, 110,\n    ],\n    high: [\n      1000, 100, 22, 9, 4, 2, 0.2, 0.2, 0.2, 0.2, 0.2, 2, 4, 9, 22, 100, 1000,\n    ],\n  },\n};\n","import { forge } from \"calculates\";\nimport { plinko_payouts } from \"./plinkoPayouts\";\n\nexport type PlinkoRisk = \"low\" | \"medium\" | \"high\";\n\nexport const calculatePlinko = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n  rows: number,\n  risk: PlinkoRisk,\n) => {\n  const seeds: string[] = [];\n  let split_numbers: number[] = [];\n  let position = 0;\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  let series_1 = forge.hmac.create();\n  series_1.start(\"sha256\", server_seed);\n  series_1.update(client_seed + \":\" + nonce + \":0\");\n  const series_1_hash = series_1.digest().toHex();\n\n  let series_2 = forge.hmac.create();\n  series_2.start(\"sha256\", server_seed);\n  series_2.update(client_seed + \":\" + nonce + \":1\");\n  const series_2_hash = series_2.digest().toHex();\n\n  let series_3 = forge.hmac.create();\n  series_3.start(\"sha256\", server_seed);\n  series_3.update(client_seed + \":\" + nonce + \":2\");\n  const series_3_hash = series_3.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_1_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_2_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_3_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 20; x++) {\n    let s = x * 4;\n\n    const seedForNum_1 = parseInt(seeds[s], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[s + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[s + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[s + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    const sum = Math.floor((+num1 + +num2 + +num3 + +num4) * 2);\n\n    split_numbers.push(sum);\n  }\n\n  split_numbers = split_numbers.slice(0, rows);\n\n  for (let i = 0; i < split_numbers.length; i++) {\n    position = +position + +split_numbers[i];\n  }\n\n  return {\n    result:\n      plinko_payouts[rows as unknown as keyof typeof plinko_payouts][risk][\n        position\n      ],\n    server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calcluateLimbo = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds = [];\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const hash_result = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(hash_result.substring(x * 2, s + 2));\n  }\n\n  const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n  const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n  const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n  const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n  let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n  let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n  let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n  let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n  let roll_number = toFixed((+num1 + +num2 + +num3 + +num4) * 1000000, 0);\n  let payout = toFixed(((1000000 / (+roll_number + 1)) * 0.97) / 1, 2);\n\n  return {\n    payout,\n    server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\n\nexport const calculateDiamonds = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds: string[] = [];\n  let split_numbers: number[] = [];\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  let server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const result_hash = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(result_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 20; x++) {\n    let s = x * 4;\n\n    const seedForNum_1 = parseInt(seeds[s + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[s + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[s + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[s + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    let sum = Math.floor((+num1 + +num2 + +num3 + +num4) * 7);\n\n    split_numbers.push(sum);\n  }\n\n  split_numbers = split_numbers.slice(0, 5);\n\n  return {\n    diamonds: split_numbers,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateRoulette = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  var seeds: string[] = [];\n\n  var md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const hash_result = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(hash_result.substring(x * 2, s + 2));\n  }\n\n  const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n  const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n  const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n  const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n  let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n  let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n  let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n  let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n  let roll_number = toFixed((+num1 + +num2 + +num3 + +num4) * 37, 0);\n\n  return {\n    result: roll_number,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport type { TowersDifficulty, TowersBuildLine } from \"pages/Towers\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateTowers = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n  difficulty: TowersDifficulty,\n) => {\n  let columns = 4;\n\n  if (difficulty === \"medium\" || difficulty === \"wicked\") {\n    columns = 3;\n  } else if (difficulty === \"hard\") {\n    columns = 2;\n  }\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  let server_seed_hash = md.digest().toHex();\n\n  const matrix_results = [];\n\n  for (let x = 0; x < 9; ++x) {\n    const seeds = [];\n\n    const md = forge.md.sha256.create();\n    md.update(server_seed);\n    server_seed_hash = md.digest().toHex();\n\n    const hash = forge.hmac.create();\n    hash.start(\"sha256\", server_seed);\n    hash.update(client_seed + \":\" + nonce + \":\" + x);\n    const hashResult = hash.digest().toHex();\n\n    let s = 0;\n\n    for (let k = 0; k < 32; k++) {\n      s = k * 2;\n      seeds.push(hashResult.substring(k * 2, s + 2));\n    }\n\n    const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n    let sum = toFixed(+num1 + +num2 + +num3 + +num4, 12);\n    let found_location = parseInt(toFixed(+sum * columns, 0));\n\n    let generated_other_positions = [];\n\n    let good_locations = [];\n    let bad_locations = [];\n\n    for (let y = 0; y < columns; y++) {\n      if (y === found_location) {\n        continue;\n      }\n\n      generated_other_positions.push(y);\n    }\n\n    if (difficulty === \"wicked\" || difficulty === \"brutal\") {\n      good_locations.push(found_location);\n      bad_locations = generated_other_positions;\n    } else {\n      good_locations = generated_other_positions;\n      bad_locations.push(found_location);\n    }\n\n    matrix_results.push({\n      good_locations: good_locations,\n      bad_locations: bad_locations,\n    });\n  }\n\n  const reversed = matrix_results.reverse();\n  const tower: TowersBuildLine[] = [];\n\n  for (let i = 0; i < reversed.length; i++) {\n    let line: TowersBuildLine = [];\n\n    for (let j = 0; j < columns; j++) {\n      if (reversed[i][\"good_locations\"].includes(j)) {\n        line.push(true);\n      } else {\n        line.push(false);\n      }\n    }\n    tower.push(line);\n  }\n\n  return {\n    tower,\n    seed: server_seed_hash,\n  };\n};\n","import nodeForge from \"node-forge\";\n\nexport const forge = nodeForge;\nexport * from \"./crash\";\nexport * from \"./dice\";\nexport * from \"./plinko\";\nexport * from \"./poker\";\nexport * from \"./limbo\";\nexport * from \"./diamonds\";\nexport * from \"./roulette\";\nexport * from \"./blackjack\";\nexport * from \"./keno\";\nexport * from \"./mines\";\nexport * from \"./fortune\";\nexport * from \"./towers\";\nexport * from \"./lottery\";\n","import React, { FC } from \"react\";\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport const PageTemplate: FC<Props> = ({ children }) => {\n  return (\n    <div>\n      <p className=\"lead\">\n        This page does not send any data to the server. All of the calculations\n        happen right in your browser.\n      </p>\n\n      <p>We've the following parameters:</p>\n\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Checking = () => {\n  return (\n    <p>\n      If you are interested in checking the code behind this, please open\n      <b>\n        <a href=\"https://github.com/FaucetPayio/verify\"> source code</a>\n      </b>\n    </p>\n  );\n};\n","import clsx from \"clsx\";\nimport React, { FC, ReactNode } from \"react\";\n\nexport interface FieldProps {\n  title?: ReactNode;\n  subTitle?: ReactNode;\n  children?: ReactNode;\n\n  className?: string;\n}\n\nexport const Field: FC<FieldProps> = ({\n  subTitle,\n  title,\n  children,\n  className,\n}) => {\n  return (\n    <div className={clsx(\"inputWrapper\", className)}>\n      <p>{title}</p>\n      {children}\n      <small className=\"text-secondary \">{subTitle}</small>\n    </div>\n  );\n};\n","import React, {\n  DetailedHTMLProps,\n  FC,\n  InputHTMLAttributes,\n  ReactNode,\n} from \"react\";\nimport clsx from \"clsx\";\nimport { Field } from \"components/Field\";\n\ninterface Props\n  extends Omit<\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n    \"title\"\n  > {\n  title?: ReactNode;\n  subTitle?: ReactNode;\n}\n\nexport const Input: FC<Props> = ({ subTitle, title, className, ...props }) => {\n  return (\n    <Field subTitle={subTitle} title={title}>\n      <input\n        {...props}\n        className={clsx(\"form-control me-sm-2\", className)}\n        type=\"text\"\n      />\n    </Field>\n  );\n};\n"],"names":["toFixed","num","fixed","re","RegExp","result","toString","match","calculateCrashResult","client_seed","serverSeed","numberOfGames","p1","p2","p3","p4","roll","crashPoint","lastSeed","actual_hash","x","md","forge","update","digest","toHex","parseInt","substring","replace","Math","floor","pow","parseFloat","push","gameHash","newSeedMD","calculateDiceResult","clientSeed","nonce","combo","serverMD","serverSeedHash","comboMD","combo_length","length","index","lucky","hexString","rollResult","plinko_payouts","low","medium","high","calculatePlinko","server_seed","rows","risk","seeds","split_numbers","position","server_seed_hash","series_1","start","series_1_hash","series_2","series_2_hash","series_3","series_3_hash","s","seedForNum_1","seedForNum_2","seedForNum_3","seedForNum_4","num1","num2","num3","num4","sum","slice","i","calcluateLimbo","hash_series","hash_result","roll_number","payout","calculateDiamonds","result_hash","diamonds","seed","calculateRoulette","calculateTowers","difficulty","columns","matrix_results","hash","hashResult","k","found_location","generated_other_positions","good_locations","bad_locations","y","reversed","reverse","tower","line","j","includes","nodeForge","PageTemplate","children","className","Checking","href","Field","subTitle","title","clsx","Input","props","type"],"sourceRoot":""}