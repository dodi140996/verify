{"version":3,"file":"static/js/842.e3d7c517.chunk.js","mappings":"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","sources":["calculates/toFixed.ts","calculates/crash.ts","calculates/dice.ts","calculates/plinkoPayouts.ts","calculates/plinko.ts","calculates/poker.ts","calculates/limbo.ts","calculates/diamonds.ts","calculates/roulette.ts","calculates/blackjack.ts","calculates/keno.ts","calculates/mines.ts","calculates/fortune.ts","calculates/towers.ts","calculates/lottery.ts","calculates/index.ts","components/PageTemplate/index.tsx","components/Checking/index.tsx","components/Field/index.tsx","components/Input/index.tsx","assets/cards/cardsList.ts","components/Card/index.tsx","components/CardRow/index.tsx"],"sourcesContent":["export const toFixed = (num: number, fixed: number) => {\n  var re = new RegExp(\"^-?\\\\d+(?:.\\\\d{0,\" + (fixed || -1) + \"})?\");\n  const result = num.toString().match(re);\n\n  return result ? result[0] : \"\";\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport interface CrashResult {\n  gameHash: string;\n  crashPoint: string;\n}\n\nexport const calculateCrashResult = (\n  client_seed: string,\n  serverSeed: string,\n  numberOfGames: string | number,\n) => {\n  let lastSeed = serverSeed;\n  let actual_hash = \"\";\n  let p1: number,\n    p2: number,\n    p3: number,\n    p4: number,\n    roll: number,\n    crashPoint: string;\n\n  const result: CrashResult[] = [];\n\n  for (let x = 0; x < numberOfGames; x++) {\n    const md = forge.md.sha512.create();\n    md.update(client_seed + \"-\" + lastSeed);\n    actual_hash = md.digest().toHex();\n\n    p1 = parseInt(\n      (actual_hash.substring(0, 2) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p2 = parseInt(\n      (actual_hash.substring(2, 4) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p3 = parseInt(\n      (actual_hash.substring(4, 6) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p4 = parseInt(\n      (actual_hash.substring(6, 8) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n\n    roll = Math.floor(\n      (p1 / Math.pow(256, 1) +\n        p2 / Math.pow(256, 2) +\n        p3 / Math.pow(256, 3) +\n        p4 / Math.pow(256, 4)) *\n        1000000,\n    );\n    crashPoint = toFixed(\n      parseFloat(((1000000 / (roll + 1)) * 0.96).toString()),\n      2,\n    );\n\n    result.push({\n      crashPoint,\n      gameHash: lastSeed,\n    });\n\n    const newSeedMD = forge.md.sha256.create();\n    newSeedMD.update(lastSeed);\n    lastSeed = newSeedMD.digest().toHex();\n  }\n\n  return result;\n};\n","import { forge } from \"calculates\";\n\nexport const calculateDiceResult = (\n  clientSeed: string,\n  serverSeed: string,\n  nonce: string | number,\n) => {\n  let combo = serverSeed + \":\" + clientSeed + \":\" + nonce;\n\n  const serverMD = forge.md.sha256.create();\n  serverMD.update(serverSeed);\n  var serverSeedHash = serverMD.digest().toHex();\n\n  const comboMD = forge.md.sha512.create();\n  comboMD.update(combo);\n  combo = comboMD.digest().toHex();\n\n  const combo_length = combo.length;\n  let index = 0;\n  let lucky = 1000000;\n  let hexString = \"\";\n\n  while (lucky >= 1000000) {\n    hexString = combo.substring(index, index + 5);\n    lucky = parseInt((hexString + \"\").replace(/[^a-f0-9]/gi, \"\"), 16);\n\n    if (index + 5 > combo_length) {\n      break;\n    }\n\n    index = index + 5;\n  }\n\n  let roll = 0;\n\n  let result = \"Impossible Game\";\n\n  if (lucky < 1000000) {\n    roll = lucky % 10000;\n    result = `${roll}`;\n  }\n\n  return {\n    serverSeed: serverSeedHash,\n    rollResult: result,\n  };\n};\n","export const plinko_payouts = {\n  \"8\": {\n    low: [4, 1.82, 1.1, 1, 0.5, 1, 1.1, 1.82, 4],\n    medium: [14, 2.4, 1.3, 0.7, 0.4, 0.7, 1.3, 2.4, 14],\n    high: [28, 3.63, 1.5, 0.3, 0.2, 0.3, 1.5, 3.63, 28],\n  },\n  \"9\": {\n    low: [6, 1.9, 1.4, 1, 0.7, 0.7, 1, 1.4, 1.9, 6],\n    medium: [17, 3.2, 1.7, 0.9, 0.5, 0.5, 0.9, 1.7, 3.2, 17],\n    high: [42.2, 6.2, 2, 0.6, 0.2, 0.2, 0.6, 2, 6.2, 42.2],\n  },\n  \"10\": {\n    low: [7, 2.1, 1.3, 1.1, 1, 0.5, 1, 1.1, 1.3, 2.1, 7],\n    medium: [20, 3.7, 2, 1.4, 0.6, 0.4, 0.6, 1.4, 2, 3.7, 20],\n    high: [70, 9, 3, 0.9, 0.3, 0.2, 0.3, 0.9, 3, 9, 70],\n  },\n  \"11\": {\n    low: [7, 1.8, 1.6, 1.3, 1, 0.7, 0.7, 1, 1.3, 1.6, 1.8, 7],\n    medium: [24, 4.6, 2.7, 1.8, 0.7, 0.5, 0.5, 0.7, 1.8, 2.7, 4.6, 24],\n    high: [120, 11, 5.2, 1.4, 0.4, 0.2, 0.2, 0.4, 1.4, 5.2, 11, 120],\n  },\n  \"12\": {\n    low: [5, 1.8, 1.3, 1.3, 1.1, 1, 0.5, 1, 1.1, 1.3, 1.3, 1.8, 5],\n    medium: [33, 8, 3.6, 2, 1.1, 0.6, 0.3, 0.6, 1.1, 2, 3.6, 8, 33],\n    high: [163, 21, 8.1, 1.9, 0.7, 0.2, 0.2, 0.2, 0.7, 1.9, 8.1, 21, 163],\n  },\n  \"13\": {\n    low: [8, 3.2, 1.9, 1.8, 1.2, 0.9, 0.7, 0.7, 0.9, 1.2, 1.8, 1.9, 3.2, 8],\n    medium: [40, 12, 5, 2.9, 1.3, 0.7, 0.4, 0.4, 0.7, 1.3, 2.9, 5, 12, 40],\n    high: [252, 36, 10, 3.9, 1, 0.2, 0.2, 0.2, 0.2, 1, 3.9, 10, 36, 252],\n  },\n  \"14\": {\n    low: [7, 2.5, 2, 1.3, 1.1, 1.1, 1, 0.5, 1, 1.1, 1.1, 1.3, 2, 2.5, 7],\n    medium: [58, 15, 5.8, 3.9, 1.8, 1, 0.5, 0.2, 0.5, 1, 1.8, 3.9, 5.8, 15, 58],\n    high: [\n      420, 50, 17, 4.8, 1.9, 0.3, 0.2, 0.2, 0.2, 0.3, 1.9, 4.8, 17, 50, 420,\n    ],\n  },\n  \"15\": {\n    low: [13, 6.5, 2, 1.5, 1.4, 1.1, 1, 0.7, 0.7, 1, 1.1, 1.4, 1.5, 2, 6.5, 13],\n    medium: [\n      88, 19, 10, 4.4, 2.9, 1.3, 0.5, 0.3, 0.3, 0.5, 1.3, 2.9, 4.4, 10, 19, 88,\n    ],\n    high: [620, 79, 27, 7, 3, 0.5, 0.2, 0.2, 0.2, 0.2, 0.5, 3, 7, 27, 79, 620],\n  },\n  \"16\": {\n    low: [\n      14, 5, 1.4, 1.3, 1.2, 1.1, 1.1, 1, 0.5, 1, 1.1, 1.1, 1.2, 1.3, 1.4, 5, 14,\n    ],\n    medium: [\n      110, 41, 8, 4, 2.9, 1.5, 1, 0.5, 0.3, 0.5, 1, 1.5, 2.9, 4, 8, 41, 110,\n    ],\n    high: [\n      1000, 100, 22, 9, 4, 2, 0.2, 0.2, 0.2, 0.2, 0.2, 2, 4, 9, 22, 100, 1000,\n    ],\n  },\n};\n","import { forge } from \"calculates\";\nimport { plinko_payouts } from \"./plinkoPayouts\";\n\nexport type PlinkoRisk = \"low\" | \"medium\" | \"high\";\n\nexport const calculatePlinko = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n  rows: number,\n  risk: PlinkoRisk,\n) => {\n  const seeds: string[] = [];\n  let split_numbers: number[] = [];\n  let position = 0;\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  let series_1 = forge.hmac.create();\n  series_1.start(\"sha256\", server_seed);\n  series_1.update(client_seed + \":\" + nonce + \":0\");\n  const series_1_hash = series_1.digest().toHex();\n\n  let series_2 = forge.hmac.create();\n  series_2.start(\"sha256\", server_seed);\n  series_2.update(client_seed + \":\" + nonce + \":1\");\n  const series_2_hash = series_2.digest().toHex();\n\n  let series_3 = forge.hmac.create();\n  series_3.start(\"sha256\", server_seed);\n  series_3.update(client_seed + \":\" + nonce + \":2\");\n  const series_3_hash = series_3.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_1_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_2_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_3_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 20; x++) {\n    let s = x * 4;\n\n    const seedForNum_1 = parseInt(seeds[s], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[s + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[s + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[s + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    const sum = Math.floor((+num1 + +num2 + +num3 + +num4) * 2);\n\n    split_numbers.push(sum);\n  }\n\n  split_numbers = split_numbers.slice(0, rows);\n\n  for (let i = 0; i < split_numbers.length; i++) {\n    position = +position + +split_numbers[i];\n  }\n\n  return {\n    result:\n      plinko_payouts[rows as unknown as keyof typeof plinko_payouts][risk][\n        position\n      ],\n    server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateVideoPoker = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds: string[] = [];\n  const roll_numbers: string[] = [];\n  let position = 0;\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  const server_seed_hash = md.digest().toHex();\n\n  let s = 0;\n\n  for (let n = 0; n < 8; n++) {\n    const hash_series = forge.hmac.create();\n    hash_series.start(\"sha256\", server_seed);\n    hash_series.update(client_seed + \":\" + nonce + \":\" + n);\n    const series_result = hash_series.digest().toHex();\n\n    for (let x = 0; x < 32; x++) {\n      s = x * 2;\n      seeds.push(series_result.substring(x * 2, s + 2));\n    }\n  }\n\n  for (let x = 52; x > 0; x--) {\n    const seedForNum_1 = parseInt(seeds[position + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[position + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[position + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[position + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    const sum = toFixed(+num1 + +num2 + +num3 + +num4, 12);\n    let roll_number = toFixed(+sum * x, 0);\n\n    position += 4;\n\n    roll_numbers.push(roll_number);\n  }\n\n  let deck = Array.from(Array(51).keys());\n  let initial_cards: number[] = [];\n  let coming_cards: number[] = [];\n\n  roll_numbers.every((i) => {\n    let card_id = deck[+i];\n\n    if (initial_cards.length < 5) {\n      initial_cards.push(card_id);\n    } else if (coming_cards.length < 5) {\n      coming_cards.push(card_id);\n    } else {\n      return false;\n    }\n\n    deck.splice(+i, 1);\n\n    return true;\n  });\n\n  return {\n    cards: {\n      initial: initial_cards,\n      coming: coming_cards,\n    },\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calcluateLimbo = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds = [];\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const hash_result = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(hash_result.substring(x * 2, s + 2));\n  }\n\n  const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n  const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n  const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n  const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n  let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n  let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n  let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n  let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n  let roll_number = toFixed((+num1 + +num2 + +num3 + +num4) * 1000000, 0);\n  let payout = toFixed(((1000000 / (+roll_number + 1)) * 0.97) / 1, 2);\n\n  return {\n    payout,\n    server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\n\nexport const calculateDiamonds = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds: string[] = [];\n  let split_numbers: number[] = [];\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  let server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const result_hash = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(result_hash.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 20; x++) {\n    let s = x * 4;\n\n    const seedForNum_1 = parseInt(seeds[s + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[s + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[s + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[s + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    let sum = Math.floor((+num1 + +num2 + +num3 + +num4) * 7);\n\n    split_numbers.push(sum);\n  }\n\n  split_numbers = split_numbers.slice(0, 5);\n\n  return {\n    diamonds: split_numbers,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateRoulette = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  var seeds: string[] = [];\n\n  var md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var hash_series = forge.hmac.create();\n  hash_series.start(\"sha256\", server_seed);\n  hash_series.update(client_seed + \":\" + nonce);\n  const hash_result = hash_series.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(hash_result.substring(x * 2, s + 2));\n  }\n\n  const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n  const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n  const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n  const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n  let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n  let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n  let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n  let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n  let roll_number = toFixed((+num1 + +num2 + +num3 + +num4) * 37, 0);\n\n  return {\n    result: roll_number,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateBlackJack = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  const seeds: string[] = [];\n  const roll_numbers: number[] = [];\n  let position = 0;\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  const server_seed_hash = md.digest().toHex();\n\n  let s = 0;\n\n  for (let n = 0; n < 7; n++) {\n    const hash_series = forge.hmac.create();\n    hash_series.start(\"sha256\", server_seed);\n    hash_series.update(client_seed + \":\" + nonce + \":\" + n);\n    const hash_result = hash_series.digest().toHex();\n\n    for (let x = 0; x < 32; x++) {\n      s = x * 2;\n      seeds.push(hash_result.substring(x * 2, s + 2));\n    }\n  }\n\n  for (let x = 52; x > 0; x--) {\n    const seedForNum_1 = parseInt(seeds[position + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[position + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[position + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[position + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n    let sum = toFixed(+num1 + +num2 + +num3 + +num4, 12);\n    let roll_number = toFixed(+sum * 52, 0);\n\n    position += 4;\n\n    roll_numbers.push(+roll_number);\n  }\n\n  const player_hand = [roll_numbers[0], roll_numbers[1]];\n  const dealer_hand = [roll_numbers[2], roll_numbers[3]];\n  const all_cards = [];\n\n  for (let x = 4; x < 52; x++) {\n    all_cards.push(roll_numbers[x]);\n  }\n\n  return {\n    cards: {\n      player: player_hand,\n      dealer: dealer_hand,\n      all: all_cards,\n    },\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\n\nexport const calculateKeno = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n) => {\n  var result: number[] = [];\n  var seeds: string[] = [];\n  var split_numbers: number[] = [];\n  var deck = Array.from({ length: 40 }, (_, i) => i + 1);\n\n  var md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var series_1 = forge.hmac.create();\n  series_1.start(\"sha256\", server_seed);\n  series_1.update(client_seed + \":\" + nonce + \":0\");\n  const series_1_result = series_1.digest().toHex();\n\n  var series_2 = forge.hmac.create();\n  series_2.start(\"sha256\", server_seed);\n  series_2.update(client_seed + \":\" + nonce + \":1\");\n  const series_2_result = series_2.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_1_result.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_2_result.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 10; x++) {\n    let s = x * 4;\n    let p = 40 - x;\n\n    const seedForNum_1 = parseInt(seeds[s + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[s + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[s + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[s + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    let sum = Math.floor((+num1 + +num2 + +num3 + +num4) * p);\n\n    split_numbers.push(sum);\n  }\n\n  for (let i = 0; i < split_numbers.length; i++) {\n    let number = deck[split_numbers[i]];\n\n    result.push(number);\n    deck.splice(split_numbers[i], 1);\n  }\n\n  return {\n    result,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateMines = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n  mines: number,\n) => {\n  var seeds: string[] = [];\n  var deck = Array.from(Array(25).keys());\n  var roll_numbers: number[] = [];\n  var position = 0;\n\n  var md = forge.md.sha256.create();\n  md.update(server_seed);\n  var server_seed_hash = md.digest().toHex();\n\n  var series_1 = forge.hmac.create();\n  series_1.start(\"sha256\", server_seed);\n  series_1.update(client_seed + \":\" + nonce + \":0\");\n  const series_1_result = series_1.digest().toHex();\n\n  var series_2 = forge.hmac.create();\n  series_2.start(\"sha256\", server_seed);\n  series_2.update(client_seed + \":\" + nonce + \":1\");\n  const series_2_result = series_2.digest().toHex();\n\n  var series_3 = forge.hmac.create();\n  series_3.start(\"sha256\", server_seed);\n  series_3.update(client_seed + \":\" + nonce + \":2\");\n  const series_3_result = series_3.digest().toHex();\n\n  let s = 0;\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_1_result.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_2_result.substring(x * 2, s + 2));\n  }\n\n  for (let x = 0; x < 32; x++) {\n    s = x * 2;\n    seeds.push(series_3_result.substring(x * 2, s + 2));\n  }\n\n  for (let x = 25; x > 1; x--) {\n    const seedForNum_1 = parseInt(seeds[position + 0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[position + 1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[position + 2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[position + 3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n\n    let sum = toFixed(+num1 + +num2 + +num3 + +num4, 12);\n    let roll_number = toFixed(+sum * x, 0);\n\n    position += 4;\n\n    roll_numbers.push(+roll_number);\n  }\n\n  const cells: boolean[] = [];\n\n  for (let i = 0; i < 25; i++) {\n    cells.push(false);\n  }\n\n  for (let i = 0; i < mines; i++) {\n    let number = deck[roll_numbers[i]];\n    deck.splice(roll_numbers[i], 1);\n\n    cells[number] = true;\n  }\n\n  return {\n    cells,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\nimport { toFixed } from \"./toFixed\";\n\nconst wheel_outcomes = [\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"12X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"52XA\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"6X\",\n  \"3X\",\n  \"1X\",\n  \"12X\",\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"25X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"12X\",\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"52XB\",\n  \"3X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"12X\",\n  \"1X\",\n  \"6X\",\n  \"1X\",\n  \"3X\",\n  \"1X\",\n  \"25X\",\n  \"1X\",\n  \"3X\",\n];\n\nexport const calculateFortune = (\n  client_seed: string,\n  last_seed: string,\n  games: string | number,\n) => {\n  let actual_hash;\n  let p1, p2, p3, p4;\n\n  const result: {\n    seed: string;\n    outcome: string;\n  }[] = [];\n\n  for (let x = 0; x <= games; x++) {\n    const md = forge.md.sha512.create();\n    md.update(client_seed + \"-\" + last_seed);\n    actual_hash = md.digest().toHex();\n\n    p1 = parseInt(\n      (actual_hash.substring(0, 2) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p2 = parseInt(\n      (actual_hash.substring(2, 4) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p3 = parseInt(\n      (actual_hash.substring(4, 6) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n    p4 = parseInt(\n      (actual_hash.substring(6, 8) + \"\").replace(/[^a-f0-9]/gi, \"\"),\n      16,\n    );\n\n    const roll = toFixed(\n      p1 / Math.pow(256, 1) +\n        p2 / Math.pow(256, 2) +\n        p3 / Math.pow(256, 3) +\n        p4 / Math.pow(256, 4),\n      12,\n    );\n    const outcome = toFixed(+roll * 53, 0);\n    const outcomeResult = wheel_outcomes[+outcome];\n\n    result.push({\n      outcome: outcomeResult,\n      seed: last_seed,\n    });\n\n    var last_seedMD = forge.md.sha256.create();\n    last_seedMD.update(last_seed);\n    last_seed = last_seedMD.digest().toHex();\n  }\n\n  return result;\n};\n","import { forge } from \"calculates\";\nimport type { TowersDifficulty, TowersBuildLine } from \"pages/Towers\";\nimport { toFixed } from \"./toFixed\";\n\nexport const calculateTowers = (\n  client_seed: string,\n  server_seed: string,\n  nonce: string,\n  difficulty: TowersDifficulty,\n) => {\n  let columns = 4;\n\n  if (difficulty === \"medium\" || difficulty === \"wicked\") {\n    columns = 3;\n  } else if (difficulty === \"hard\") {\n    columns = 2;\n  }\n\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  let server_seed_hash = md.digest().toHex();\n\n  const matrix_results = [];\n\n  for (let x = 0; x < 9; ++x) {\n    const seeds = [];\n\n    const md = forge.md.sha256.create();\n    md.update(server_seed);\n    server_seed_hash = md.digest().toHex();\n\n    const hash = forge.hmac.create();\n    hash.start(\"sha256\", server_seed);\n    hash.update(client_seed + \":\" + nonce + \":\" + x);\n    const hashResult = hash.digest().toHex();\n\n    let s = 0;\n\n    for (let k = 0; k < 32; k++) {\n      s = k * 2;\n      seeds.push(hashResult.substring(k * 2, s + 2));\n    }\n\n    const seedForNum_1 = parseInt(seeds[0], 16) / Math.pow(256, 1);\n    const seedForNum_2 = parseInt(seeds[1], 16) / Math.pow(256, 2);\n    const seedForNum_3 = parseInt(seeds[2], 16) / Math.pow(256, 3);\n    const seedForNum_4 = parseInt(seeds[3], 16) / Math.pow(256, 4);\n\n    let num1 = parseFloat(seedForNum_1.toString()).toFixed(12);\n    let num2 = parseFloat(seedForNum_2.toString()).toFixed(12);\n    let num3 = parseFloat(seedForNum_3.toString()).toFixed(12);\n    let num4 = parseFloat(seedForNum_4.toString()).toFixed(12);\n    let sum = toFixed(+num1 + +num2 + +num3 + +num4, 12);\n    let found_location = parseInt(toFixed(+sum * columns, 0));\n\n    let generated_other_positions = [];\n\n    let good_locations = [];\n    let bad_locations = [];\n\n    for (let y = 0; y < columns; y++) {\n      if (y === found_location) {\n        continue;\n      }\n\n      generated_other_positions.push(y);\n    }\n\n    if (difficulty === \"wicked\" || difficulty === \"brutal\") {\n      good_locations.push(found_location);\n      bad_locations = generated_other_positions;\n    } else {\n      good_locations = generated_other_positions;\n      bad_locations.push(found_location);\n    }\n\n    matrix_results.push({\n      good_locations: good_locations,\n      bad_locations: bad_locations,\n    });\n  }\n\n  const reversed = matrix_results.reverse();\n  const tower: TowersBuildLine[] = [];\n\n  for (let i = 0; i < reversed.length; i++) {\n    let line: TowersBuildLine = [];\n\n    for (let j = 0; j < columns; j++) {\n      if (reversed[i][\"good_locations\"].includes(j)) {\n        line.push(true);\n      } else {\n        line.push(false);\n      }\n    }\n    tower.push(line);\n  }\n\n  return {\n    tower,\n    seed: server_seed_hash,\n  };\n};\n","import { forge } from \"calculates\";\n\nexport const calculateLottery = (client_seed: string, server_seed: string) => {\n  const md = forge.md.sha256.create();\n  md.update(server_seed);\n  const server_seed_hash = md.digest().toHex();\n\n  const game_hash = forge.hmac.create();\n  game_hash.start(\"sha256\", server_seed);\n  game_hash.update(client_seed);\n  const hash_result = game_hash.digest().toHex();\n\n  const remainingBalls = Array(36)\n    .fill(null)\n    .map((v, i) => i + 1);\n  const balls = [];\n\n  for (let i = 0; i < 5; i++) {\n    const cut = i * 8;\n    const random = parseInt(hash_result.substring(cut, cut + 8), 16);\n\n    const index = Math.floor((random / 0x100000000) * remainingBalls.length);\n    balls.push(remainingBalls.splice(index, 1)[0]);\n  }\n\n  const jackpot =\n    Math.floor(\n      (parseInt(hash_result.substring(40, 48), 16) / 0x100000000) * 10,\n    ) + 1;\n\n  return {\n    winNumbers: balls,\n    jackpot,\n    hash: server_seed_hash,\n  };\n};\n","import nodeForge from \"node-forge\";\n\nexport const forge = nodeForge;\nexport * from \"./crash\";\nexport * from \"./dice\";\nexport * from \"./plinko\";\nexport * from \"./poker\";\nexport * from \"./limbo\";\nexport * from \"./diamonds\";\nexport * from \"./roulette\";\nexport * from \"./blackjack\";\nexport * from \"./keno\";\nexport * from \"./mines\";\nexport * from \"./fortune\";\nexport * from \"./towers\";\nexport * from \"./lottery\";\n","import React, { FC } from \"react\";\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport const PageTemplate: FC<Props> = ({ children }) => {\n  return (\n    <div>\n      <p className=\"lead\">\n        This page does not send any data to the server. All of the calculations\n        happen right in your browser.\n      </p>\n\n      <p>We've the following parameters:</p>\n\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Checking = () => {\n  return (\n    <p>\n      If you are interested in checking the code behind this, please open\n      <b>\n        <a href=\"https://github.com/FaucetPayio/verify\"> source code</a>\n      </b>\n    </p>\n  );\n};\n","import clsx from \"clsx\";\nimport React, { FC, ReactNode } from \"react\";\n\nexport interface FieldProps {\n  title?: ReactNode;\n  subTitle?: ReactNode;\n  children?: ReactNode;\n\n  className?: string;\n}\n\nexport const Field: FC<FieldProps> = ({\n  subTitle,\n  title,\n  children,\n  className,\n}) => {\n  return (\n    <div className={clsx(\"inputWrapper\", className)}>\n      <p>{title}</p>\n      {children}\n      <small className=\"text-secondary \">{subTitle}</small>\n    </div>\n  );\n};\n","import React, {\n  DetailedHTMLProps,\n  FC,\n  InputHTMLAttributes,\n  ReactNode,\n} from \"react\";\nimport clsx from \"clsx\";\nimport { Field } from \"components/Field\";\n\ninterface Props\n  extends Omit<\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n    \"title\"\n  > {\n  title?: ReactNode;\n  subTitle?: ReactNode;\n}\n\nexport const Input: FC<Props> = ({ subTitle, title, className, ...props }) => {\n  return (\n    <Field subTitle={subTitle} title={title}>\n      <input\n        {...props}\n        className={clsx(\"form-control me-sm-2\", className)}\n        type=\"text\"\n      />\n    </Field>\n  );\n};\n","import _0 from \"./cards/0.png\";\nimport _1 from \"./cards/1.png\";\nimport _2 from \"./cards/2.png\";\nimport _3 from \"./cards/3.png\";\nimport _4 from \"./cards/4.png\";\nimport _5 from \"./cards/5.png\";\nimport _6 from \"./cards/6.png\";\nimport _7 from \"./cards/7.png\";\nimport _8 from \"./cards/8.png\";\nimport _9 from \"./cards/9.png\";\nimport _10 from \"./cards/10.png\";\nimport _11 from \"./cards/11.png\";\nimport _12 from \"./cards/12.png\";\nimport _13 from \"./cards/13.png\";\nimport _14 from \"./cards/14.png\";\nimport _15 from \"./cards/15.png\";\nimport _16 from \"./cards/16.png\";\nimport _17 from \"./cards/17.png\";\nimport _18 from \"./cards/18.png\";\nimport _19 from \"./cards/19.png\";\nimport _20 from \"./cards/20.png\";\nimport _21 from \"./cards/21.png\";\nimport _22 from \"./cards/22.png\";\nimport _23 from \"./cards/23.png\";\nimport _24 from \"./cards/24.png\";\nimport _25 from \"./cards/25.png\";\nimport _26 from \"./cards/26.png\";\nimport _27 from \"./cards/27.png\";\nimport _28 from \"./cards/28.png\";\nimport _29 from \"./cards/29.png\";\nimport _30 from \"./cards/30.png\";\nimport _31 from \"./cards/31.png\";\nimport _32 from \"./cards/32.png\";\nimport _33 from \"./cards/33.png\";\nimport _34 from \"./cards/34.png\";\nimport _35 from \"./cards/35.png\";\nimport _36 from \"./cards/36.png\";\nimport _37 from \"./cards/37.png\";\nimport _38 from \"./cards/38.png\";\nimport _39 from \"./cards/39.png\";\nimport _40 from \"./cards/40.png\";\nimport _41 from \"./cards/41.png\";\nimport _42 from \"./cards/42.png\";\nimport _43 from \"./cards/43.png\";\nimport _44 from \"./cards/44.png\";\nimport _45 from \"./cards/45.png\";\nimport _46 from \"./cards/46.png\";\nimport _47 from \"./cards/47.png\";\nimport _48 from \"./cards/48.png\";\nimport _49 from \"./cards/49.png\";\nimport _50 from \"./cards/50.png\";\nimport _51 from \"./cards/51.png\";\n\nimport blue_back from \"./cards/blue_back.png\";\n\nexport const cardsList = [\n  _0,\n  _1,\n  _2,\n  _3,\n  _4,\n  _5,\n  _6,\n  _7,\n  _8,\n  _9,\n  _10,\n  _11,\n  _12,\n  _13,\n  _14,\n  _15,\n  _16,\n  _17,\n  _18,\n  _19,\n  _20,\n  _21,\n  _22,\n  _23,\n  _24,\n  _25,\n  _26,\n  _27,\n  _28,\n  _29,\n  _30,\n  _31,\n  _32,\n  _33,\n  _34,\n  _35,\n  _36,\n  _37,\n  _38,\n  _39,\n  _40,\n  _41,\n  _42,\n  _43,\n  _44,\n  _45,\n  _46,\n  _47,\n  _48,\n  _49,\n  _50,\n  _51,\n\n  blue_back,\n];\n","import React, { FC } from \"react\";\nimport { cardsList } from \"assets\";\n\ninterface Props {\n  id: number;\n}\n\nexport const Card: FC<Props> = ({ id }) => {\n  return <img src={cardsList[id]} alt={`card#${id}`} />;\n};\n","import React, { FC, Fragment } from \"react\";\nimport clsx from \"clsx\";\n\nimport { Field } from \"components\";\nimport { Card } from \"../Card\";\n\ninterface Props {\n  cards: number[];\n  title: string;\n  subTitle: string;\n\n  className?: string;\n}\n\nexport const CardRow: FC<Props> = ({ cards, title, subTitle, className }) => {\n  return (\n    <div>\n      <Field title={title} subTitle={subTitle}>\n        <div className={clsx(\"cards\", className)}>\n          {cards.map((id, i) => (\n            <Fragment key={`${id}_${i}`}>\n              <Card id={id} />\n            </Fragment>\n          ))}\n        </div>\n      </Field>\n    </div>\n  );\n};\n"],"names":["toFixed","num","fixed","re","RegExp","result","toString","match","calculateCrashResult","client_seed","serverSeed","numberOfGames","p1","p2","p3","p4","roll","crashPoint","lastSeed","actual_hash","x","md","forge","sha512","create","update","digest","toHex","parseInt","substring","replace","Math","floor","pow","parseFloat","push","gameHash","newSeedMD","sha256","calculateDiceResult","clientSeed","nonce","combo","serverMD","serverSeedHash","comboMD","combo_length","length","index","lucky","hexString","rollResult","plinko_payouts","low","medium","high","calculatePlinko","server_seed","rows","risk","seeds","split_numbers","position","server_seed_hash","series_1","hmac","start","series_1_hash","series_2","series_2_hash","series_3","series_3_hash","s","seedForNum_1","seedForNum_2","seedForNum_3","seedForNum_4","num1","num2","num3","num4","sum","slice","i","calculateVideoPoker","roll_numbers","n","hash_series","series_result","roll_number","deck","Array","from","keys","initial_cards","coming_cards","every","card_id","splice","cards","initial","coming","seed","calcluateLimbo","hash_result","payout","calculateDiamonds","result_hash","diamonds","calculateRoulette","calculateBlackJack","player_hand","dealer_hand","all_cards","player","dealer","all","calculateKeno","_","series_1_result","series_2_result","p","number","calculateMines","mines","series_3_result","cells","wheel_outcomes","calculateFortune","last_seed","games","outcome","outcomeResult","last_seedMD","calculateTowers","difficulty","columns","matrix_results","hash","hashResult","k","found_location","generated_other_positions","good_locations","bad_locations","y","reversed","reverse","tower","line","j","includes","calculateLottery","game_hash","remainingBalls","fill","map","v","balls","cut","random","winNumbers","jackpot","nodeForge","PageTemplate","children","className","Checking","href","Field","subTitle","title","clsx","Input","props","type","cardsList","Card","id","src","alt","CardRow","Fragment"],"sourceRoot":""}